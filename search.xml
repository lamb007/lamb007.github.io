<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux更新软件包版本</title>
    <url>/2024/04/14/Linux%E6%9B%B4%E6%96%B0%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>试了多种方法，最方便，最简洁的方法是使用 <code>Apt-show-versions</code>，能看到版本，还能看到仓库网址</p>
<p>默认情况下系统没有安装 <code>apt-show-versions</code>，你需要使用以下命令来安装它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install apt-show-versions</span><br></pre></td></tr></table></figure>

<p>按照后，运行以下命令查找软件包的版本，如gdb：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-show-versions -a gdb</span><br><span class="line">gdb:amd64 12.1-0ubuntu1~22.04 install ok installed</span><br><span class="line">gdb:amd64 9.1-0ubuntu1         focal         mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">gdb:amd64 9.2-0ubuntu1~20.04.1 focal-updates mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">gdb:amd64 12.0.90-0ubuntu1     jammy         cn.archive.ubuntu.com</span><br><span class="line">gdb:amd64 12.1-0ubuntu1~22.04  jammy-updates cn.archive.ubuntu.com</span><br><span class="line">No stable version</span><br><span class="line">gdb:amd64/jammy-updates 12.1-0ubuntu1~22.04 uptodate</span><br><span class="line">gdb:i386 9.1-0ubuntu1         focal         mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">gdb:i386 9.2-0ubuntu1~20.04.1 focal-updates mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">gdb:i386 12.0.90-0ubuntu1     jammy         cn.archive.ubuntu.com</span><br><span class="line">gdb:i386 12.1-0ubuntu1~22.04  jammy-updates cn.archive.ubuntu.com</span><br><span class="line">No stable version</span><br><span class="line">gdb:i386 not installed</span><br></pre></td></tr></table></figure>

<p>这里，<code>-a</code> 选项打印给定软件包的所有可用版本。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux command</category>
      </categories>
      <tags>
        <tag>Linux command</tag>
      </tags>
  </entry>
  <entry>
    <title>fish使用.md</title>
    <url>/2024/05/10/fish%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h1><p>命令为红色为无效命令，命令为蓝色为有效命令</p>
<p><img src="https://yzwsblog.com/2024/05/10/fish%E4%BD%BF%E7%94%A8/image-20240510142521941.png" alt="image-20240510142521941"></p>
<p>有效路径有下划线，无效路径没有下划线</p>
<p><img src="https://yzwsblog.com/2024/05/10/fish%E4%BD%BF%E7%94%A8/image-20240510142551160.png" alt="image-20240510142551160"></p>
<h1 id="命令提示"><a href="#命令提示" class="headerlink" title="命令提示"></a>命令提示</h1><p><img src="https://yzwsblog.com/2024/05/10/fish%E4%BD%BF%E7%94%A8/image-20240510142725032.png" alt="image-20240510142725032"></p>
<p>按<code>-&gt;</code>或<code>Ctrl + F</code>可以采纳全部建议</p>
<p>按<code>ALT + -&gt;</code> 可以采纳部分建议</p>
<h1 id="fish配置文件"><a href="#fish配置文件" class="headerlink" title="fish配置文件"></a>fish配置文件</h1><p>fish的一个配置文件<code>~/.config/fish/config.fish</code>，fish启动时会自动加载这个文件，类似于bash中的.bashrc文件。</p>
<h1 id="fish语法及使用"><a href="#fish语法及使用" class="headerlink" title="fish语法及使用"></a>fish语法及使用</h1><h2 id="四种变量"><a href="#四种变量" class="headerlink" title="四种变量"></a>四种变量</h2><p><a href="https://fishshell.com/docs/current/language.html#variables-universal">https://fishshell.com/docs/current/language.html#variables-universal</a></p>
<p><a href="https://fishshell.com/docs/current/language.html#variables-scope">https://fishshell.com/docs/current/language.html#variables-scope</a></p>
<p>There are four kinds of variables in fish: universal, global, function and local variables.</p>
<ul>
<li><p>Universal variables are shared between all fish sessions a user is running on one computer. They are stored on disk and persist even after reboot.</p>
</li>
<li><p>Global variables are specific to <strong>the current fish session</strong>. They can be erased by explicitly requesting <code>set -e</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">set</span> -gx py python                                                                                                                                                                                                       </span><br><span class="line">❯ <span class="built_in">echo</span> <span class="variable">$py</span>                                                                                                     </span><br><span class="line">python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭终端后重启</span></span><br><span class="line">❯ <span class="built_in">echo</span> <span class="variable">$py</span></span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Function variables are specific to the currently executing function. They are erased (“go out of scope”) when the current function ends. Outside of a function, they don’t go out of scope.</p>
</li>
<li><p>Local variables are specific to the current block of commands, and automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands <code>for</code>, <code>while</code> , <code>if</code>, <code>function</code>, <code>begin</code> or <code>switch</code>, and ends with the command <code>end</code>. Outside of a block, this is the same as the function scope.</p>
</li>
</ul>
<p>Variables can be explicitly set to be universal with the <code>-U</code> or <code>--universal</code> switch, global with <code>-g</code> or <code>--global</code>, function-scoped with <code>-f</code> or <code>--function</code> and local to the current block with <code>-l</code> or <code>--local</code>. The scoping rules <strong>when creating or updating a variable are</strong>:</p>
<ul>
<li>When a scope is explicitly given, it will be used. If a variable of the same name exists in a different scope, that variable will not be changed.(当明确指定范围时，将使用它。如果不同范围内存在同名变量，则不会更改其他范围的同名变量)</li>
<li>When no scope is given, but a variable of that name exists, the variable of the smallest scope will be modified. The scope will not be changed.(未指定范围但存在同名变量时，将修改最小范围的变量。范围不会更改)</li>
<li>When no scope is given and no variable of that name exists, the variable is created in function scope if inside a function, or global scope if no function is executing.(未指定范围且不存在同名变量时，如果变量位于函数内，则在函数范围内创建该变量；如果未执行任何函数，则在全局范围内创建该变量。)</li>
</ul>
<p>There can be many variables with the same name, but different scopes. When you <a href="https://fishshell.com/docs/current/language.html#expand-variable">use a variable</a>, the smallest scoped variable of that name will be used. If a local variable exists, it will be used instead of the global or universal variable of the same name.</p>
<p>可以有多个同名但作用域不同的变量。当你 <a href="https://fishshell.com/docs/current/language.html#expand-variable">使用变量</a> 时，<strong>将使用该名称的最小作用域变量</strong>。如果存在局部变量，则将使用该局部变量，而不是同名的全局或通用变量。</p>
<p>应用场景：</p>
<p>Typically inside <strong>functions</strong> you should use <strong>local scope</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> something</span><br><span class="line">    <span class="built_in">set</span> -l file /path/to/my/file <span class="comment"># local variable</span></span><br><span class="line">    <span class="keyword">if</span> not <span class="built_in">test</span> -e <span class="string">"<span class="variable">$file</span>"</span></span><br><span class="line">        <span class="built_in">set</span> file /path/to/my/otherfile</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> something</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">test</span> -e /path/to/my/file</span><br><span class="line">        <span class="built_in">set</span> -f file /path/to/my/file <span class="comment"># functional variable</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">set</span> -f file /path/to/my/otherfile</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<p>If you want to <strong>set something in config.fish</strong>, or set something in a function and <strong>have it available for the rest of the session</strong>, global scope is a good choice:</p>
<p>只在当前shell session生效，关闭当前shell session后失效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Don't shorten the working directory in the prompt</span></span><br><span class="line"><span class="built_in">set</span> -g fish_prompt_pwd_dir_length 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set my preferred cursor style:</span></span><br><span class="line"><span class="keyword">function</span> setcursors</span><br><span class="line">   <span class="built_in">set</span> -g fish_cursor_default block</span><br><span class="line">   <span class="built_in">set</span> -g fish_cursor_insert line</span><br><span class="line">   <span class="built_in">set</span> -g fish_cursor_visual underscore</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set my language</span></span><br><span class="line"><span class="built_in">set</span> -gx LANG de_DE.UTF-8</span><br></pre></td></tr></table></figure>

<p>If you want to set <strong>some personal customization</strong>, universal variables are nice:(永久保存，关机后也存在)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Typically you'd run this interactively, fish takes care of keeping it.</span></span><br><span class="line"><span class="built_in">set</span> -U fish_color_autosuggestion 555</span><br></pre></td></tr></table></figure>

<p>关于universal variables，fish文档有点冲突</p>
<p><a href="https://fishshell.com/docs/current/language.html#variables-scope%E4%B8%AD%E6%8F%8F%E8%BF%B0Universal">https://fishshell.com/docs/current/language.html#variables-scope中描述Universal</a> variables are shared between all fish sessions <strong>a user</strong> is running on one computer，是a user，即仅对一个用户有效</p>
<p><a href="https://fishshell.com/docs/current/language.html#variables-universal%E4%B8%AD%E6%8F%8F%E8%BF%B0Universal">https://fishshell.com/docs/current/language.html#variables-universal中描述Universal</a> variables are variables that are shared between <strong>all the user’s</strong> fish sessions on the computer，是all user，对所有用户有效</p>
<p>测试了一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">set</span> -U fish_color_autosuggestion 555                                                                           </span><br><span class="line"></span><br><span class="line">❯ <span class="built_in">echo</span> <span class="variable">$fish_color_autosuggestion</span>                                                                                </span><br><span class="line">555</span><br><span class="line"></span><br><span class="line">❯ su        <span class="comment"># change to root</span></span><br><span class="line"></span><br><span class="line">❯ <span class="built_in">echo</span> <span class="variable">$fish_color_autosuggestion</span></span><br><span class="line">brblack</span><br></pre></td></tr></table></figure>

<p>应该是one user</p>
<p>【注意】</p>
<ul>
<li>不要将universal variables 附加到 config.fish 文件中，因为这些变量会随着每个新 shell 实例而变长。相反，只需在命令行运行一次 set -Ux 即可。从 Fish 3.0 开始，通用变量将存储在文件 ~/.config/fish/fish_variables 中。在之前的版本中，它是 ~/.config/fish/fishd.MACHINE_ID，其中 MACHINE_ID 通常是 MAC 地址。参考<a href="https://stackoverflow.com/questions/25632846/how-to-set-environment-variables-in-fish-shell">https://stackoverflow.com/questions/25632846/how-to-set-environment-variables-in-fish-shell</a></li>
<li>不要将global variables附加到 config.fish 中，因为global variables的本意是当前shell session有效的变量，如果将其添加到config.fish中，那么所有shell session中都会加载config.fish中的global variables</li>
</ul>
<h2 id="添加路径到PATH变量"><a href="#添加路径到PATH变量" class="headerlink" title="添加路径到PATH变量"></a>添加路径到PATH变量</h2><p>fish_add_path命令</p>
<p><a href="https://fishshell.com/docs/current/cmds/fish_add_path.html">https://fishshell.com/docs/current/cmds/fish_add_path.html</a></p>
<p><strong>fish_add_path</strong> is a simple way to add more components to fish’s <a href="https://fishshell.com/docs/current/language.html#envvar-PATH"><code>PATH</code></a>. It does this by adding the components either to $fish_user_paths or directly to <a href="https://fishshell.com/docs/current/language.html#envvar-PATH"><code>PATH</code></a> (if the <code>--path</code> switch is given).</p>
<p>Components are added in the order they are given, and they are prepended(前置) to the path unless <code>--append</code> is given (if <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="45.662ex" height="2.245ex" role="img" focusable="false" viewbox="0 -705 20182.8 992.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(550,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(895,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="msub" transform="translate(1364,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mi" transform="translate(2427.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(2896.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="msub" transform="translate(3362.5,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mi" transform="translate(4252.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(4781.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(5142.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(5718.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(6187.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(6532.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(7001.1,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(7573.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(8042.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(8508.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(9028.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(9472.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(9833.8,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(10409.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(10938.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(11299.8,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(12177.8,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(12643.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(13172.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(13772.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(14241.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(14602.8,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(15178.8,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(15644.8,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(16134.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(16663.8,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(17114.8,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(17580.8,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(17878.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(18407.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(18876.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(19237.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(19582.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>fish_user_paths, which is itself prepended to <a href="https://fishshell.com/docs/current/language.html#envvar-PATH"><code>PATH</code></a>, so they still stay ahead of the system paths).</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="34.29ex" height="2.347ex" role="img" focusable="false" viewbox="0 -750 15156.1 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(550,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(895,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="msub" transform="translate(1364,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mi" transform="translate(2427.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(2896.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="msub" transform="translate(3362.5,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mi" transform="translate(4252.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(4781.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(5142.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(5718.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(6187.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(7187.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(8187.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(8690.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(9219.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(9580.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(10156.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">会</text></g><g data-mml-node="mi" transform="translate(11156.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">被</text></g><g data-mml-node="mi" transform="translate(12156.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">添</text></g><g data-mml-node="mi" transform="translate(13156.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">加</text></g><g data-mml-node="mi" transform="translate(14156.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g></g></g></svg></mjx-container>PATH的前面</p>
<p><strong>-a</strong> or <strong>–append</strong></p>
<p>Add components to the <em>end</em> of the variable.</p>
<p><strong>-m</strong> or <strong>–move</strong></p>
<p>Move already-existing components to the place they would be added - by default they would be left in place and not added again.(如果组件已经存在，则不会再次添加，除非给出 –move 开关，否则组件将保留在同一位置。)</p>
<p><strong>-U</strong> or <strong>–universal</strong></p>
<p>Use a universal <a href="https://fishshell.com/docs/current/language.html#envvar-fish_user_paths"><code>fish_user_paths</code></a> - this is the default if it doesn’t already exist.(如不不存在参数，则默认为-U)</p>
<p><strong>-P</strong> or <strong>–path</strong></p>
<p>Manipulate <a href="https://fishshell.com/docs/current/language.html#envvar-PATH"><code>PATH</code></a> directly.(直接加入<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="18.31ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 8093 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(751,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(1501,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(2205,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(3093,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(4093,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">而</text></g><g data-mml-node="mi" transform="translate(5093,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">不</text></g><g data-mml-node="mi" transform="translate(6093,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">加</text></g><g data-mml-node="mi" transform="translate(7093,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">入</text></g></g></g></svg></mjx-container>fish_user_paths)</p>
<p>例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># I just installed mycoolthing and need to add it to the path to use it.</span></span><br><span class="line">&gt; fish_add_path /opt/mycoolthing/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># I want my ~/.local/bin to be checked first.</span></span><br><span class="line">&gt; fish_add_path -m ~/.local/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># I prefer using a global fish_user_paths</span></span><br><span class="line">&gt; fish_add_path -g ~/.local/bin ~/.otherbin /usr/local/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># I want to append to the entire $PATH because this directory contains fallbacks</span></span><br><span class="line">&gt; fish_add_path -aP /opt/fallback/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># I want to add the bin/ directory of my current $PWD (say /home/nemo/)</span></span><br><span class="line">&gt; fish_add_path -v bin/</span><br><span class="line"><span class="built_in">set</span> fish_user_paths /home/nemo/bin /usr/bin /home/nemo/.local/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># I have installed ruby via homebrew</span></span><br><span class="line">&gt; fish_add_path /usr/local/opt/ruby/bin</span><br></pre></td></tr></table></figure>





<h2 id="设置环境变量-set命令"><a href="#设置环境变量-set命令" class="headerlink" title="设置环境变量(set命令)"></a>设置环境变量(set命令)</h2><p><code>set</code> manipulates <a href="https://fishshell.com/docs/current/language.html#variables">shell variables</a>.</p>
<p>If both <em>NAME</em> and <em>VALUE</em> are provided, <code>set</code> assigns any values to variable <em>NAME</em>. <strong>Variables in fish are <a href="https://fishshell.com/docs/current/language.html#variables-lists">lists</a>, multiple values are allowed</strong>. One or more variable <em>INDEX</em> can be specified including ranges (not for all options.)</p>
<p>(可以设置多个值，如set -gx py py1 py2 py3)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">set</span> -gx py python1 python2                                                                                     </span><br><span class="line"></span><br><span class="line">❯ <span class="built_in">echo</span> <span class="variable">$py</span>                                                                                                       </span><br><span class="line">python1 python2</span><br></pre></td></tr></table></figure>

<p>If no <em>VALUE</em> is given, the variable will be set to the empty list.</p>
<p>If <code>set</code> is ran without arguments, it prints the names and values of all shell variables in sorted order. Passing <a href="https://fishshell.com/docs/current/language.html#variables-scope">scope</a> or <a href="https://fishshell.com/docs/current/language.html#variables-export">export</a> flags allows filtering this to only matching variables, so <code>set --local</code> would only show local variables.</p>
<p>With <code>--show</code>, <code>set</code> will describe the given variable names, explaining how they have been defined - in which scope with which values and options.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">set</span> --show py                                                                                                  (base)</span><br><span class="line"><span class="variable">$py</span>: <span class="built_in">set</span> <span class="keyword">in</span> global scope, exported, with 2 elements</span><br><span class="line"><span class="variable">$py</span>[1]: |python1|</span><br><span class="line"><span class="variable">$py</span>[2]: |python2|</span><br></pre></td></tr></table></figure>

<p>With <code>--erase</code> and optionally a scope flag <code>set</code> will <strong>erase the matching variable</strong> (or the variable of that name in the smallest possible scope).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">set</span> --erase py  <span class="comment"># 删除                                                                                               </span></span><br><span class="line"></span><br><span class="line">❯ <span class="built_in">set</span> --show py</span><br><span class="line"><span class="comment"># 已经被删除，没有输出</span></span><br></pre></td></tr></table></figure>



<p>四种范围选项：</p>
<p>The following options control variable scope:</p>
<ul>
<li><p><strong>-U</strong> or <strong>–universal</strong></p>
<p>Sets a universal variable. The variable will be immediately available to all the user’s <code>fish</code> instances on the machine, and will be persisted across restarts of the shell.</p>
</li>
<li><p><strong>-f</strong> or <strong>–function</strong></p>
<p>Sets a variable scoped to the executing function. It is erased when the function ends.</p>
</li>
<li><p><strong>-l</strong> or <strong>–local</strong></p>
<p>Sets a locally-scoped variable in this block. It is erased when the block ends. Outside of a block, this is the same as <strong>–function</strong>.</p>
</li>
<li><p><strong>-g</strong> or <strong>–global</strong></p>
<p>Sets a globally-scoped variable. Global variables are available to all functions running in the same shell. They can be modified or erased.</p>
</li>
</ul>
<p><strong>–export</strong> or <strong>-x</strong></p>
<p>Causes the specified shell variable to be exported to child processes (making it an “environment variable”).</p>
<p><strong>–unexport</strong> or <strong>-u</strong></p>
<p>Causes the specified shell variable to NOT be exported to child processes.</p>
<p>使用了-x，变量会被导入子进程</p>
<p>测试</p>
<p>创建test.fish,在shell中执行fish脚本，会开启一个子进程执行fish脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/fish</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$py</span></span><br></pre></td></tr></table></figure>

<p>不使用-x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">set</span> -g py python                                                                                               </span><br><span class="line">❯ <span class="built_in">echo</span> <span class="variable">$py</span>                                                                                                       </span><br><span class="line">python <span class="comment"># 当前进程可以输出$py</span></span><br><span class="line">                                                                                                    </span><br><span class="line">❯ ./test.fish  <span class="comment"># 执行test.fish，没有输出，说明没有变量py没有导出给执行shell脚本的子进程                                                                                        </span></span><br></pre></td></tr></table></figure>

<p>使用-x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">set</span> -gx py python                                                                                             </span><br><span class="line"></span><br><span class="line">❯ <span class="built_in">echo</span> <span class="variable">$py</span>                                                                                                       </span><br><span class="line">python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">❯ ./test.fish <span class="comment"># 执行test.fish，有输出，说明没有变量py导出给执行shell脚本的子进程                                                                                       </span></span><br><span class="line">python</span><br></pre></td></tr></table></figure>



<p><strong>-e</strong> or <strong>–erase</strong> *NAME*[<em>INDEX</em>]删除环境变量</p>
<p>Causes the specified shell variables to be erased. Supports erasing from multiple scopes at once. Individual items in a variable at <em>INDEX</em> in brackets can be specified.</p>
<p><strong>-S</strong> or <strong>–show</strong>查看环境变量</p>
<p>Shows information about the given variables. If no variable names are given then all variables are shown in sorted order. It shows the scopes the given variables are set in, along with the values in each and whether or not it is exported. No other flags can be used with this option.</p>
<p>用的最多的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -Ux key value <span class="comment">#全局生效</span></span><br><span class="line"><span class="built_in">set</span> -gx key value <span class="comment">#当前shell生效</span></span><br><span class="line"><span class="built_in">set</span> --erase key  <span class="comment"># 删除                                                                                             </span></span><br><span class="line"><span class="built_in">set</span> --show key <span class="comment"># 查看</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>fish shell</category>
      </categories>
      <tags>
        <tag>fish shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu22.04搭建clang环境</title>
    <url>/2024/04/14/ubuntu22-04%E6%90%AD%E5%BB%BAclang%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="LLVM、Clang、gcc、msvc的关系"><a href="#LLVM、Clang、gcc、msvc的关系" class="headerlink" title="LLVM、Clang、gcc、msvc的关系"></a>LLVM、Clang、gcc、msvc的关系</h1><p>编译原理中学习过，一个编译器可以分为三个部分：</p>
<ul>
<li><strong>Frontend前端</strong>：词法分析、语法分析、语义分析和中间代码生成</li>
<li><strong>Optimizer优化器</strong>：中间代码优化</li>
<li><strong>Backend后端</strong>：生成机器码</li>
</ul>
<p><img src="https://yzwsblog.com/2024/04/14/ubuntu22-04%E6%90%AD%E5%BB%BAclang%E7%8E%AF%E5%A2%83/webp.webp" alt="img"></p>
<p>LLVM架构</p>
<p><img src="https://yzwsblog.com/2024/04/14/ubuntu22-04%E6%90%AD%E5%BB%BAclang%E7%8E%AF%E5%A2%83/webp-1713080274658-6.webp" alt="img"></p>
<p>LLVM中，不同的前端后端使用统一的中间代码LLVM Intermediate Representation (LLVM IR)</p>
<p>如果需要开发一种新的变成语言，只需要设计一种新的编译前端，将这种编程语言翻译成LLVM IR</p>
<p>如果需要支持一种新的硬件设备，只需要设计一种新的编译后端，将LLVM IR生成对应硬件的机器代码</p>
<p>从上图可以看到，clang只是基于LLVM架构的C/C++/Objective-C<strong>编译器前端</strong>。</p>
<ul>
<li>clang与LLVM的关系</li>
</ul>
<p><img src="https://yzwsblog.com/2024/04/14/ubuntu22-04%E6%90%AD%E5%BB%BAclang%E7%8E%AF%E5%A2%83/llvm-IR.jpeg" alt="LLVM: Low-Level Virtual Machine"></p>
<p>当出现LLVM时，根据语境有不同的含义，可以是广义上指整个LLVM架构，包括前端，优化器，后端。也可以狭义指专用于代码优化和目标代码生成的LLVM后端。</p>
<ul>
<li>clang、msvc(Microsoft Visual C++)、gcc之间的关系(主要从编译器使用者的角度看三者之间的关系，而不是从编译原理理论角度)<ul>
<li>平台支持：msvc主要用于Windows平台，而gcc/clang则可以用于Windows/Linux/MacOS等所有平台。</li>
<li>gcc/clang往往和msvc不兼容。具体的说，gcc下的代码如果要支持msvc，可能需要进行一些额外的工作来支持不同的编译器。</li>
</ul>
</li>
</ul>
<h1 id="编译LLVM"><a href="#编译LLVM" class="headerlink" title="编译LLVM"></a>编译LLVM</h1><p>LLVM GitHub Page：<a href="https://github.com/llvm/llvm-project">https://github.com/llvm/llvm-project</a></p>
<p>编译LLVM前，需要一些额外的配置：具体可以查看<a href="https://llvm.org/docs/GettingStarted.html#requirements">https://llvm.org/docs/GettingStarted.html#requirements</a></p>
<ul>
<li>按照bulid-essential，bulid-essential包含 g++, gcc, make 等必须依赖包。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure>

<ul>
<li><p>构建工具选择ninja</p>
<p>ninja github page：<a href="https://github.com/ninja-build/ninja">https://github.com/ninja-build/ninja</a></p>
<p>下载ninja-linux，解压，其中有一个<code>ninja</code>文件</p>
<p>将其复制到<code>/usr/local/bin</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> ./ninja /usr/local/bin</span><br></pre></td></tr></table></figure>

<p>赋予可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> a+x /usr/local/bin/ninja</span><br></pre></td></tr></table></figure>

<p>查看ninja版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ninja --version</span><br></pre></td></tr></table></figure></li>
</ul>
<p>编译LLVM</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/llvm/llvm-project.git</span><br><span class="line"><span class="built_in">mkdir</span> llvm-project/build</span><br><span class="line"><span class="built_in">cd</span> llvm-project/build</span><br><span class="line">cmake -G Ninja ../llvm \</span><br><span class="line">   -DLLVM_ENABLE_PROJECTS=clang \</span><br><span class="line">   -DLLVM_BUILD_EXAMPLES=ON \</span><br><span class="line">   -DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">   -DLLVM_ENABLE_ASSERTIONS=ON</span><br><span class="line">ninja -j16 <span class="comment"># 16核并行运行16个任务</span></span><br><span class="line">cmake --install . --prefix /usr/local <span class="comment"># or somewhere else</span></span><br></pre></td></tr></table></figure>

<p>等待编译完成</p>
<p>参考：</p>
<p><a href="https://aosabook.org/en/v1/llvm.html">https://aosabook.org/en/v1/llvm.html</a></p>
<p><a href="https://hyfshishen.github.io/tutorial-01-llvm.html">https://hyfshishen.github.io/tutorial-01-llvm.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux环境搭建</category>
      </categories>
      <tags>
        <tag>Linux环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu系统常用插件安装.md</title>
    <url>/2024/05/10/ubuntu%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><h2 id="wezterm终端"><a href="#wezterm终端" class="headerlink" title="wezterm终端"></a>wezterm终端</h2><p>wezterm终端自带terminal multiplexer功能</p>
<p>wezterm相关地址:</p>
<p>Github：<a href="https://github.com/wez/wezterm">https://github.com/wez/wezterm</a></p>
<p>官网：<a href="https://wezfurlong.org/wezterm/">https://wezfurlong.org/wezterm/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://wezfurlong.org/wezterm/install/linux.html">https://wezfurlong.org/wezterm/install/linux.html</a></p>
<h3 id="wezterm主题美化"><a href="#wezterm主题美化" class="headerlink" title="wezterm主题美化"></a>wezterm主题美化</h3><p><a href="https://github.com/KevinSilvester/wezterm-config">https://github.com/KevinSilvester/wezterm-config</a></p>
<p>wezterm配置文件推荐位置为：</p>
<blockquote>
<p>单配置文件：The recommendation is to place your configuration file at <code>$HOME/.wezterm.lua</code> (<code>%HOME%/.wezterm.lua</code> on Windows) to get started.</p>
<p>多配置文件：More complex configurations that need to span multiple files can be placed in <code>$XDG_CONFIG_HOME/wezterm/wezterm.lua</code> (for X11/Wayland) or <code>$HOME/.config/wezterm/wezterm.lua</code> (for all other systems).</p>
</blockquote>
<p>由于这个项目使用的是多配置文集，因此进入<code>~/config</code>,将项目克隆到wezterm目录中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:KevinSilvester/wezterm-config.git wezterm</span><br></pre></td></tr></table></figure>

<p>重启wezterm</p>
<ul>
<li>提示未安装字体JetBrains Mono Nerd Font：</li>
</ul>
<blockquote>
<p><a href="https://www.nerdfonts.com/font-downloads">https://www.nerdfonts.com/font-downloads</a></p>
<p>下载Jetbrains Mono Nerd Font，解压到/usr/share/fonts目录下</p>
</blockquote>
<p>执行命令刷新缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fc-cache -f -v</span><br></pre></td></tr></table></figure>

<p>查看是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fc-list | grep <span class="string">'JetBrainsMono Nerd'</span>                                                                            </span><br><span class="line">/usr/share/fonts/JetBrainsMono Nerd Font/JetBrainsMonoNLNerdFontPropo-Thin.ttf: JetBrainsMonoNL Nerd Font Propo,JetBrainsMonoNL NFP,JetBrainsMonoNL NFP Thin:style=Thin,Regular</span><br><span class="line">/usr/share/fonts/JetBrainsMono Nerd Font/JetBrainsMonoNerdFont-MediumItalic.ttf: JetBrainsMono Nerd Font,JetBrainsMono NF,JetBrainsMono NF Medium:style=Medium Italic,Italic</span><br><span class="line">...........<span class="comment"># 省略</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>提示未安装fish</p>
<p>fish是一种shell，ubuntu默认shell是bash，下载fish</p>
<p>fish下载网址：<a href="https://launchpad.net/~fish-shell/+archive/ubuntu/release-3/+packages">https://launchpad.net/~fish-shell/+archive/ubuntu/release-3/+packages</a></p>
<p>如图，ubuntu22.04是jammy版本的，下载<a href="https://launchpad.net/~fish-shell/+archive/ubuntu/release-3/+files/fish_3.7.1-1~jammy_amd64.deb">fish_3.7.1-1~jammy_amd64.deb</a></p>
<p><img src="https://yzwsblog.com/2024/05/10/ubuntu%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/image-20240510133632121.png" alt="image-20240510133632121"></p>
<p>进入deb所在目录，安装deb包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install ./fish_3.7.1-1~jammy_amd64.deb</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h3><ul>
<li><p>修改快捷键：~/.config/wezterm/config/bindings.lua</p>
</li>
<li><p>修改终端默认大小：~/.config/wezterm/config/appearance.lua</p>
<p>参考：</p>
<p><a href="https://wezfurlong.org/wezterm/config/lua/config/initial_cols.html">https://wezfurlong.org/wezterm/config/lua/config/initial_cols.html</a></p>
<p><a href="https://wezfurlong.org/wezterm/config/lua/config/initial_rows.html">https://wezfurlong.org/wezterm/config/lua/config/initial_rows.html</a></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> {</span><br><span class="line">   <span class="comment">-- 初始行数、列数</span></span><br><span class="line">   initial_rows = <span class="number">28</span>,</span><br><span class="line">   initial_cols = <span class="number">120</span>,</span><br><span class="line">   animation_fps = <span class="number">60</span>,</span><br><span class="line">   max_fps = <span class="number">60</span></span><br><span class="line">   <span class="comment">-- 省略</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul>
<li><p>发现wezterm里无法使用中文输入法，默认输入的都是英文</p>
<p>参考问题：<a href="https://github.com/wez/wezterm/issues/250">https://github.com/wez/wezterm/issues/250</a></p>
<p>后面发现新版本已经修复了这个问题(<a href="https://wezfurlong.org/wezterm/config/lua/config/use_ime.html?h=use_ime">https://wezfurlong.org/wezterm/config/lua/config/use_ime.html?h=use_ime</a>)</p>
<p>无法输入中文是因为我在安装了搜狗输入法之后把英文输入法删除了，后面我将英文输入法添加后在wezterm中就可以切换为中文输入法</p>
</li>
</ul>
<h2 id="alacritty终端"><a href="#alacritty终端" class="headerlink" title="alacritty终端"></a>alacritty终端</h2><p>alacritty速度也很快，就是不支持terminal multiplexer</p>
<p>用于代替ubuntu默认的终端，默认的终端经常卡顿、闪烁，由于有一些软件默认使用bash配置，在fish中配置很麻烦，因此alacritty不使用fish，使用bash。</p>
<p>相关地址：</p>
<p>GitHub：<a href="https://github.com/alacritty/alacritty">https://github.com/alacritty/alacritty</a></p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><a href="https://github.com/alacritty/alacritty/blob/master/INSTALL.md#debianubuntu">https://github.com/alacritty/alacritty/blob/master/INSTALL.md#debianubuntu</a></p>
<p>注意：</p>
<blockquote>
<p>apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3</p>
<p>由于安装了conda，python3可以不用安装</p>
</blockquote>
<p>添加桌面入口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> target/release/alacritty /usr/local/bin <span class="comment"># or anywhere else in $PATH</span></span><br><span class="line">sudo <span class="built_in">cp</span> extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg</span><br><span class="line">sudo desktop-file-install extra/linux/Alacritty.desktop</span><br><span class="line">sudo update-desktop-database</span><br></pre></td></tr></table></figure>

<p>颜色主题：</p>
<p><a href="https://github.com/catppuccin/alacritty">https://github.com/catppuccin/alacritty</a></p>
<h2 id="fish配置"><a href="#fish配置" class="headerlink" title="fish配置"></a>fish配置</h2><p>fish有默认的主题美化web界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fish_config</span><br></pre></td></tr></table></figure>

<p>进入web界面挑选</p>
<h4 id="tide主题"><a href="#tide主题" class="headerlink" title="tide主题"></a>tide主题</h4><p>Github：<a href="https://github.com/IlanCosman/tide">https://github.com/IlanCosman/tide</a></p>
<p>使用fisher安装tide，不要使用手动安装，有bug</p>
<p>安装完成后，输入<code>tide configure</code>即可配置</p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="thefuck"><a href="#thefuck" class="headerlink" title="thefuck"></a>thefuck</h2><p>Github：<a href="https://github.com/nvbn/thefuck">https://github.com/nvbn/thefuck</a></p>
<p>输错命令时输入fuck可以自动修改，例如thefuck README中的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ apt-get install vim</span><br><span class="line">E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)</span><br><span class="line">E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?</span><br><span class="line"></span><br><span class="line">➜ fuck</span><br><span class="line">sudo apt-get install vim [enter/↑/↓/ctrl+c]</span><br><span class="line">[sudo] password <span class="keyword">for</span> nvbn:</span><br><span class="line">Reading package lists... Done</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<p>On Ubuntu / Mint, install <em>The Fuck</em> with the following commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3-dev python3-pip python3-setuptools <span class="comment"># 有conda环境可以省略</span></span><br><span class="line">pip3 install thefuck --user</span><br></pre></td></tr></table></figure>

<p>fish中配置fuck命令，参考：<a href="https://github.com/nvbn/thefuck/wiki/Shell-aliases">https://github.com/nvbn/thefuck/wiki/Shell-aliases</a></p>
<blockquote>
<p>Create a file <code>~/.config/fish/functions/fuck.fish</code> instead and paste the output of <code>thefuck --alias</code> into that file. Fish should start as fast as before.</p>
</blockquote>
<p>fish中运行该命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ thefuck --<span class="built_in">alias</span>                                                                                               </span><br><span class="line"><span class="keyword">function</span> fuck -d <span class="string">"Correct your previous console command"</span></span><br><span class="line">  <span class="built_in">set</span> -l fucked_up_command <span class="variable">$history</span>[1]</span><br><span class="line">  <span class="built_in">env</span> TF_SHELL=fish TF_ALIAS=fuck PYTHONIOENCODING=utf-8 thefuck <span class="variable">$fucked_up_command</span> THEFUCK_ARGUMENT_PLACEHOLDER <span class="variable">$argv</span> | <span class="built_in">read</span> -l unfucked_command</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$unfucked_command</span>"</span> != <span class="string">""</span> ]</span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$unfucked_command</span></span><br><span class="line">    <span class="built_in">builtin</span> <span class="built_in">history</span> delete --exact --case-sensitive -- <span class="variable">$fucked_up_command</span></span><br><span class="line">    <span class="built_in">builtin</span> <span class="built_in">history</span> merge</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> ~/.config/fish/functions/fuck.fish</span><br></pre></td></tr></table></figure>

<p>将上面的function fuck粘贴到fuck.fish中即可。</p>
<h2 id="lf"><a href="#lf" class="headerlink" title="lf"></a>lf</h2><p>终端文件阅读器</p>
<p>Github：<a href="https://github.com/gokcehan/lf%EF%BC%8Chttps://github.com/gokcehan/lf/wiki/Tutorial">https://github.com/gokcehan/lf，https://github.com/gokcehan/lf/wiki/Tutorial</a></p>
<p>下载：<a href="https://github.com/gokcehan/lf/releases%EF%BC%8C[lf-linux-amd64.tar.gz](https://github.com/gokcehan/lf/releases/download/r32/lf-linux-amd64.tar.gz)">https://github.com/gokcehan/lf/releases，[lf-linux-amd64.tar.gz](https://github.com/gokcehan/lf/releases/download/r32/lf-linux-amd64.tar.gz)</a></p>
<p>解压到<code>~/.local/bin</code></p>
<p>然后在fish中将该目录添加到PATH环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fish_add_path ~/.local/bin</span><br></pre></td></tr></table></figure>



<h2 id="trash-cli"><a href="#trash-cli" class="headerlink" title="trash-cli"></a>trash-cli</h2><p>用于代替rm命令，将文件删除后会进入回收站</p>
<p>Github：<a href="https://github.com/andreafrancia/trash-cli">https://github.com/andreafrancia/trash-cli</a></p>
<p>trash-cli 用于移动文件到回收站，同时会记录文件的原地址、删除日期和权限。trash-cli 和 KDE、GNOME、XFCE 使用同一个回收站，你可以在命令行或脚本运行 trash-cli。trash-cli 提供以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">trash-put           把文件或目录移动到回收站</span><br><span class="line">trash-empty         清空回收站</span><br><span class="line">trash-list          列出回收站文件</span><br><span class="line">trash-restore       恢复回收站文件</span><br><span class="line">trash-rm            删除回收站文件</span><br></pre></td></tr></table></figure>

<p>从 home 分区移动到回收站的文件在这：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.local/share/Trash/</span><br></pre></td></tr></table></figure>



<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install trash-cli</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux环境搭建</category>
      </categories>
      <tags>
        <tag>Linux环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Linux和Windows双系统，以及N卡驱动</title>
    <url>/2024/04/14/%E5%AE%89%E8%A3%85Linux%E5%92%8CWindows%E5%8F%8C%E7%B3%BB%E7%BB%9F%EF%BC%8C%E4%BB%A5%E5%8F%8AN%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="一、操作系统环境"><a href="#一、操作系统环境" class="headerlink" title="一、操作系统环境"></a>一、操作系统环境</h1><ul>
<li><p>电脑型号：拯救者Y9000P</p>
</li>
<li><p>操作系统：Windows11</p>
<ul>
<li><p>win11关闭快速启动</p>
<p>控制面板 =&gt; 硬件与声音 =&gt;电源选项 =&gt; 系统设置</p>
<p>点击更改当前不可用的设置，取消勾选<code>启用快速启动</code></p>
</li>
</ul>
</li>
<li><p>安全启动状态(security boot)：disabled</p>
<ul>
<li>开机过程中长按F2，进入BIOS，点击more settings，修改启动状态</li>
</ul>
</li>
<li><p>Linux系统安装在一个新的固态硬盘上，大小2TB</p>
<ul>
<li>windows中搜索<code>计算机系统</code>，点击磁盘管理，可以查看</li>
</ul>
</li>
</ul>
<h2 id="二、制作启动盘"><a href="#二、制作启动盘" class="headerlink" title="二、制作启动盘"></a>二、制作启动盘</h2><ul>
<li>Linux镜像：ubuntu22.04</li>
<li>U盘启动工具rufus<ul>
<li>分区类型：GPT</li>
<li>目标系统类型：UEFI</li>
</ul>
</li>
</ul>
<h1 id="三、设置U盘为启动项"><a href="#三、设置U盘为启动项" class="headerlink" title="三、设置U盘为启动项"></a>三、设置U盘为启动项</h1><p>同样开机过程中进入BIOS，将U盘的优先级设置高于Windows</p>
<h1 id="四、安装Ubuntu"><a href="#四、安装Ubuntu" class="headerlink" title="四、安装Ubuntu"></a>四、安装Ubuntu</h1><p>一些需要注意的关键点</p>
<ul>
<li><p><code>更新和其他软件</code>：选择正常安装，其他都不用选</p>
</li>
<li><p><code>安装类型</code>：选择第三个<code>其他选项</code></p>
</li>
<li><p>创建分区</p>
<p>其中的空间大小是根据我自己的磁盘空间设置的，因为一共有2T，所以设置的偏大</p>
<table>
<thead>
<tr>
<th>新分区</th>
<th>空间大小</th>
<th>分区类型</th>
<th>分区位置</th>
<th>用于</th>
<th>挂载点</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>根目录</td>
<td>500G</td>
<td>主分区</td>
<td>空间起始位置</td>
<td>ext4日志文件系统</td>
<td>/</td>
<td>根分区 (/)： 根分区通常包含操作系统的核心文件和程序，以及用户安装的软件。如果需要按照较多软件，建议分大一点，例如各种IDE，QQ这种软件默认按照到/opt</td>
</tr>
<tr>
<td>系统引导</td>
<td>2G</td>
<td>主分区</td>
<td>空间起始位置</td>
<td>ext4日志文件系统</td>
<td>/boot</td>
<td>/boot 分区包含了用于系统引导的文件，在系统启动时被加载到内存中，以启动 Linux 操作系统。</td>
</tr>
<tr>
<td>虚拟内存</td>
<td>8G</td>
<td>逻辑分区</td>
<td>空间起始位置</td>
<td>交换空间</td>
<td>无</td>
<td>交换空间（也称为交换分区）是用于虚拟内存的一部分，用于当系统内存不足时，将内存中不常用的数据写入交换空间以释放内存</td>
</tr>
<tr>
<td>用户分区</td>
<td>剩余所有空间</td>
<td>主分区</td>
<td>空间起始位置</td>
<td>ext4日志文件系统</td>
<td>/home</td>
<td>/home 分区是用于存储用户个人文件和配置文件的地方，如代码，文档等。</td>
</tr>
</tbody></table>
</li>
<li><p>选择启动引导器的设备(在分区界面的下方，有一个下拉框)</p>
<p>选择刚才分出来的系统引导分区，及/boot对应的设备/dev/xxxxx</p>
</li>
<li><p>一直点击下一步</p>
</li>
</ul>
<h1 id="五、ubuntu的一些必要的设置"><a href="#五、ubuntu的一些必要的设置" class="headerlink" title="五、ubuntu的一些必要的设置"></a>五、ubuntu的一些必要的设置</h1><ul>
<li><p>换源，清华源，参考链接(<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a>)</p>
<p>Ubuntu 的软件源配置文件是 <code>/etc/apt/sources.list</code>。将系统自带的该文件做个备份<code>sudo cp sources.list sources.list.bak</code>，将该文件替换为下面内容，即可使用选择的软件源镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"># deb-src http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span><br><span class="line"># # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>因镜像站同步有延迟，可能会导致生产环境系统不能及时检查、安装上最新的安全更新，不建议替换 security 源。</p>
</li>
<li><p>更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
</li>
<li><p>中文输入法</p>
<p>试了Googlepinying和搜狗输入法，Linux还是搜狗输入法最好用</p>
<p>需要安装fcitx，参考搜狗输入法官方提供的安装指南(<a href="https://shurufa.sogou.com/linux/guide">https://shurufa.sogou.com/linux/guide</a>)</p>
</li>
</ul>
<h1 id="六、安装Nvidia驱动"><a href="#六、安装Nvidia驱动" class="headerlink" title="六、安装Nvidia驱动"></a>六、安装Nvidia驱动</h1><p>坑很多</p>
<ul>
<li><p>禁用Nouveau驱动</p>
<p>nouveau驱动是第三方开源驱动，不是NVIDIA官方驱动(NVIDIA不开源)</p>
<p>编辑文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/modprobe.d/blacklist.conf </span><br></pre></td></tr></table></figure>

<p>在末尾输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启电脑</p>
<p>通过快捷键Ctrl + Alt + F3(或F2，F4)切换到终端</p>
<p>输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod |grep nouveau</span><br></pre></td></tr></table></figure>

<p>如果没有任何输出，说明成功禁用了nouveau</p>
</li>
<li><p>下载NVIDIA驱动</p>
<p><a href="https://www.nvidia.cn/geforce/drivers/">https://www.nvidia.cn/geforce/drivers/</a></p>
<p>坑很多，如果安装驱动后重启或关机有问题，多半是驱动问题，只能换一个版本的驱动</p>
<p>我试了550，535，545，最后550问题最少</p>
</li>
<li><p>安装驱动</p>
<p>在命令行运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo bash ./NVIDIA-Linux-x86_64-xxx.xx.run</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<blockquote>
<p>ERROR: You appear to be running an X server; please exit X before installing.  For &gt;further details, please see the section INSTALLING THE NVIDIA DRIVER in the README &gt;available on the Linux driver download page at <a href="http://www.nvidia.com/">www.nvidia.com</a>.<br>ERROR: Installation has failed.  Please see the file ‘/var/log/nvidia-installer.log’ &gt;for details.  You may find suggestions on fixing installation problems in the README &gt;available on the Linux driver download page at <a href="http://www.nvidia.com/">www.nvidia.com</a>.</p>
</blockquote>
<p>报错提示没有关闭X server</p>
<p>解决方法(参考链接<a href="https://askubuntu.com/questions/149206/how-to-install-nvidia-run">https://askubuntu.com/questions/149206/how-to-install-nvidia-run</a>)</p>
<p>概括来说就是：</p>
<ul>
<li><p>Ctrl + ALT + F3进入命令行</p>
</li>
<li><p>关闭图形界面</p>
<p>查看gdm状态(在linux中，<em>gdm是</em>图形界面，是管理图形显示服务器并处理图形用户登录的程序；gdm用来替代原来的“X Display Manager”，是完全重写的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service gdm status</span><br></pre></td></tr></table></figure>

<p>关闭gdm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service gdm stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新运行nvidia驱动安装程序</p>
</li>
</ul>
<p>报错：</p>
<blockquote>
<p>The CC version check failed.</p>
</blockquote>
<p>系统安装的gcc版本和驱动安装需要的gcc版本不匹配</p>
<p>在ubuntu22.04，默认gcc版本为gcc11，但是，需要gcc12，需要更新gcc版本：</p>
<ol>
<li><p>确认当前 GCC 版本：使用以下命令检查系统上安装的 GCC 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 Ubuntu 官方仓库：GCC 12 已经在 Ubuntu 21.10 中可用，如果您的系统版本是 21.10 或更高版本，可以跳过这一步。如果您的系统版本低于 21.10，需要添加 Ubuntu 官方仓库。使用以下命令打开 <code>/etc/apt/sources.list</code> 文件：</p>
<p>由于我的ubuntu版本为22.04，可以省略步骤2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加以下行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://security.ubuntu.com/ubuntu hirsute-security main universe</span><br></pre></td></tr></table></figure>

<p>保存并关闭文件。</p>
</li>
<li><p>更新软件包列表：使用以下命令更新软件包列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 GCC 12：使用以下命令安装 GCC 12：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-12 g++-12</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置默认 GCC 版本：GCC 12 安装完成后，使用以下命令将其配置为默认编译器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-12</span><br></pre></td></tr></table></figure>

<p>如果您之前已经安装过其他版本的 GCC，可以使用以下命令切换默认版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config gcc</span><br></pre></td></tr></table></figure>

<p>然后输入对应的编号即可切换默认版本。</p>
</li>
<li><p>确认 GCC 版本：使用以下命令确认 GCC 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果以上步骤顺利完成，您的系统上的 GCC 编译器版本应该已经成功升级到 12 版本。</p>
<p>完成上述操作后，可以成功安装驱动</p>
</li>
<li><p>命令行输入nvidia -smi，看是否输出相应显卡信息</p>
<p>如果没有输出，重启电脑</p>
</li>
<li><p>坑</p>
<p>安装驱动后，开机没问题，关机时出现问题：</p>
<blockquote>
<p>左上角一个光标一直闪烁，过了接近2min还不关机</p>
<p>或者<br>ACPI BIOS ERROR(bug)：Could not resolve symbol [_TZ.ETMD]</p>
</blockquote>
</li>
</ul>
<p>​	解决：</p>
<p>​	拯救者有混合输入(Optimus)模式和独显直连模式两种方式，需要切换为独显直连模式</p>
<p>​	方法：开机过程中按F2进入BIOS，切换为独显模式(在windows系统中切换为独显模式好像没用，要在bios中切换)</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux环境搭建</category>
      </categories>
      <tags>
        <tag>Linux环境搭建</tag>
      </tags>
  </entry>
</search>
